#!/usr/bin/env riscos-amu -f
# Makefile for OmniDisc
#

#
# Program specific options:
#
COMPONENT  = OmniDisc

# Specifies additional targets for startup
#INITTARGET = inittarget

# Specifies additional targets for clean
CLEANTARGET = cleantarget

# Files to export as part of export_hdr or export_libs
# To export to the standard C: path, you might use an export like:
#   ${EXP_C_H}.${COMPONENT}SWIs
# To export to the library in a subdirectory, use an export like:
#   ${EXP_LIB}.${COMPONENT}.h.myheader
EXPORTS    = ${EXP_C_H}.${COMPONENT}SWIs

# Resources you want to be exported as part of the 'resources' phase of the build
#RESOURCES  = ${RESDIR}.${COMPONENT}.Messages

# Comma-separated list of paths to use for includes, such as:
#	<Lib$Dir>.LibName.
INCLUDES   = TBox:

# Space separated list of libraries to link against.
# (${CLIB} is implicit, unless NOCLIB = yes)
LIBS       =

# Space separated list of defines to set, eg -DDEBUG
CDEFINES   = -DNO_STDBOOL

# Objects to build, using the format o.<name> (will be varied for build type)
OBJS       = \
             o.Enter \
             o.OmniDisc \
             o.OmniDiscHdr \
             o.Main \
             o.FindDrives \
             o.Icon \
             o.Tools \
             o.FS \
             o.FSDefaults \
             o.FSParameters \
             o.BarIcon \
             o.Commands \
             o.StringUtils \
             o.Errors \


FORTIFY   ?= no

include CModule

# Additional dependencies
$(OZDIR).Module ${OZDIR}.OmniDisc: h.OmniDiscHdr

# Export rules
# For any files you export with EXPORTS you may need to include an
# export rule
${EXP_C_H}.${COMPONENT}SWIs: cmhg.OmniDisc
       ${CMHG} ${CMHGFLAGS} -xh $@ cmhg.OmniDisc
# To export bare files you can use the ${CP} command:
# ${EXP_LIB}.${COMPONENT}.h.myheader: h.myheader
#        ${CP} $?  $@  ${CPFLAGS}

cleantarget:
           ${RM} h.OmniDiscHdr
# This clean target removes any module header file that was built.

#---------------------------------------------------------------------------
# Dynamic dependencies:
