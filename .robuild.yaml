%YAML 1.0
---

# Example .robuild.yml file

# Source is optional (NYI), and should be a URL to source the content from
#source: <url>

# Defines a list of jobs which will be performed.
# Only 1 job will currently be executed.
jobs:
  build:
    # Env defines system variables which will be used within the environment.
    # Multiple variables may be assigned.
    env:
      "Sys$Environment": ROBuild
      "BUILD32": 1

    # Directory to change to before running script
    #dir: <working directory>

    # Commands which should be executed to perform the build.
    # The build will terminate if any command returns a non-0 return code or an error.
    script:

      # Build the tests
      - echo +++ Tests
      - dir Test
      - amu -f MakefileTestFindDrives
      - amu -f MakefileTestIcons
      - amu -f MakefileTestBarIcon
      - amu -f MakefileTestFS
      - amu -f MakefileTestFSDefaults
      - amu -f MakefileTestTools
      - dir ^

      # Run the tests (which should at least not crash)
      - dir Test
      - echo + Test find drives
      - /aif32.TestFindDrives
      - echo + Test icon selection
      - /aif32.TestIcons
      - echo + Test iconbar
      - /aif32.TestBarIcon
      - echo + Test FS defaults
      - /aif32.TestFSDefaults
      - echo + Test FS management
      - /aif32.TestFS
      - echo + Test tool operations
      - /aif32.TestTools
      - dir ^

      # Build the module
      - echo +++ Module
      - amu -f MakeROBuild ram

      # Test that the module will load and die
      - echo + Test module load/kill
      - RMLoad rm32.OmniDisc
      # We could do other runtime tests here
      - RMKill OmniDisc

    # Outputs from the build are defined in artifacts
    # These are a list of artifacts to report directories or files.
    # Only a single item is currently supported.
    artifacts:
      # Each element of the artifacts should have a path key, which gives the file or
      # directory to return.
      - path: rm32
