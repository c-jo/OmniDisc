#include "BarIcon.h"
#include "FSNumbers.h"
#include "IconPriorities.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SHOW_PASS 0

#define CHECK_EQ(VAR, EXP) { if (VAR != EXP) { printf("%d: %s got %d expected %d\n", __LINE__,#VAR, VAR, EXP); exit(1); } else if (SHOW_PASS) printf("%d: %s == %d - PASSED\n", __LINE__, #VAR, EXP); }
#define CHECK_NOT_NULL(VAR) { if (VAR == NULL) { printf("%d: %s got NULL, expected non-null\n", __LINE__,#VAR); exit(1); }  else if (SHOW_PASS) printf("%d: %s != NULL - PASSED\n", __LINE__, #VAR); }
#define CHECK_IS_NULL(VAR) { if (VAR != NULL) { printf("%d: %s got value, expected NULL\n", __LINE__,#VAR); exit(1); }  else if (SHOW_PASS) printf("%d: %s == NULL - PASSED\n", __LINE__, #VAR); }
#define CHECK_STRING(VAR, EXP) { if (strcmp(VAR,EXP)) { printf("%d: %s got '%s', expected '%s'\n", __LINE__,#VAR, VAR, EXP); exit(1); }  else if (SHOW_PASS) printf("%d: %s '%s' == '%s' - PASSED\n", __LINE__, #VAR, VAR, EXP); }

static unsigned create_count = 0;
static struct {
    int window;
    int priority;
} last_create;

int  baricon_create_icon(char *text, char *validation, int buffer_size,
                         int window, int priority)
{
   //printf("create icon %s %s %d %x\n", text, validation, window, priority);
    create_count += 1;
    last_create.window   = window;
    last_create.priority = priority;
    return create_count;
}

static unsigned delete_count = 0;
void baricon_delete_icon(int handle)
{
    delete_count += 1;
}

static unsigned update_count = 0;
static struct {
    char *text;
    char *validation;
} last_update;

void baricon_update_icon(int handle, char* new_text, char* new_validation)
{
    update_count += 1;
    last_update.text       = new_text;
    last_update.validation = new_validation;
}

static void init_fs(FS *fs, int fsnumber, const char *fsname)
{
    int n;
    fs->fsparams = malloc(sizeof(fsparameters_t));
    fs->fsparams->fsnumber = fsnumber;
    strcpy(fs->fsparams->fsname, fsname);
    fs->next = 0;

    for (n=0; n < 8; ++n)
    {
        fs->drive[n].is_removeable = n < 4;
        fs->drive[n].is_ejectable  = 0;
        fs->drive[n].is_floppy     = 0;
        fs->drive[n].discname[0] = '\0';
        fs->drive[n].share = NotShared;
    }
}

void test_update(void)
{
    FS adfs, scsi;
    BarIcon *baricon_list = 0;
    init_fs(&adfs, fsnumber_adfs, "ADFS");
    init_fs(&scsi, fsnumber_SCSIFS, "SCSI");

    // Check adding the first drive
    sprintf(adfs.drive[4].discname, "Harddisc4");

    baricon_list = baricon_update(baricon_list, &adfs, NULL);

    CHECK_EQ(create_count, 1)
    CHECK_NOT_NULL(baricon_find(baricon_list, fsnumber_adfs, 4))
    CHECK_NOT_NULL(baricon_find_icon(baricon_list, 1))

    CHECK_EQ(baricon_find     (baricon_list, fsnumber_adfs, 4)->handle, 1);
    CHECK_EQ(baricon_find_icon(baricon_list, 1)->fsnumber,  8);
    CHECK_EQ(baricon_find_icon(baricon_list, 1)->drive,     4);

    // Then the second
    sprintf(adfs.drive[5].discname, "Harddisc5");

    baricon_list = baricon_update(baricon_list, &adfs, NULL);

    CHECK_EQ(create_count, 2);
    CHECK_EQ(baricon_find     (baricon_list, fsnumber_adfs, 4)->handle, 1);
    CHECK_EQ(baricon_find_icon(baricon_list, 1)->fsnumber,  8);
    CHECK_EQ(baricon_find_icon(baricon_list, 1)->drive,     4);

    CHECK_EQ(baricon_find     (baricon_list, fsnumber_adfs, 5)->handle, 2);
    CHECK_EQ(baricon_find_icon(baricon_list, 2)->fsnumber,  8);
    CHECK_EQ(baricon_find_icon(baricon_list, 2)->drive,     5);

    // Remove the first one
    sprintf(adfs.drive[4].discname, "");

    baricon_list = baricon_update(baricon_list, &adfs, NULL);

    CHECK_EQ(delete_count, 1);

    CHECK_IS_NULL(baricon_find     (baricon_list, fsnumber_adfs, 4) );
    CHECK_IS_NULL(baricon_find_icon(baricon_list, 1)    );

    CHECK_EQ(baricon_find     (baricon_list, fsnumber_adfs, 5)->handle, 2);
    CHECK_EQ(baricon_find_icon(baricon_list, 2)->fsnumber,  8);
    CHECK_EQ(baricon_find_icon(baricon_list, 2)->drive,     5);

    // Add a second FS
    adfs.next = &scsi;
    sprintf(scsi.drive[4].discname, "SCSIdisc4");
    sprintf(scsi.drive[5].discname, "SCSIdisc5");

    baricon_list = baricon_update(baricon_list, &adfs, NULL);

    CHECK_EQ(create_count, 4);

    // Delete the first one
    baricon_list = baricon_update(baricon_list, &scsi, NULL);
    CHECK_EQ(delete_count, 2);

    // Delete the second one too
    baricon_list = baricon_update(baricon_list,NULL, NULL);
    CHECK_EQ(delete_count, 4);

    // TEST_CHECK("First Icon", -5, 0x70000000);
}

void test_positioning(void)
{
    FS adfs, scsi, ram;
    BarIcon *baricon_list = 0;
    unsigned n;

    init_fs(&adfs, fsnumber_adfs,   "ADFS");
    init_fs(&scsi, fsnumber_SCSIFS, "SCSI");
    init_fs(&ram,  fsnumber_ramfs,  "RAMFS");

    create_count = 0;

    sprintf(adfs.drive[4].discname, "Harddisc4");
    baricon_list = baricon_update(baricon_list, &adfs, NULL);
    CHECK_EQ(create_count, 1);
    CHECK_EQ(last_create.window, -5)
    CHECK_EQ(last_create.priority, 0x70000000)
    CHECK_EQ(baricon_list->handle, 1)

    sprintf(adfs.drive[5].discname, "Harddisc5");
    baricon_list = baricon_update(baricon_list, &adfs, NULL);
    CHECK_EQ(create_count, 2);
    CHECK_EQ(last_create.window, -4)
    CHECK_EQ(last_create.priority, 1);

    sprintf(adfs.drive[0].discname, ":0");
    baricon_list = baricon_update(baricon_list, &adfs, NULL);
    CHECK_EQ(create_count, 3);
    CHECK_EQ(last_create.window, -5) /* Created in a new list, as it's a floppy disc */
    CHECK_EQ(last_create.priority, 0x68000000)

    // Add another FS
    adfs.next = &scsi;

    sprintf(scsi.drive[4].discname, "SCSIdisc4");
    baricon_list = baricon_update(baricon_list, &adfs, NULL);
    CHECK_EQ(last_create.window, -4)
    CHECK_EQ(last_create.priority, 2);

    baricon_list = baricon_update(baricon_list, &ram, NULL);

    // Add a third FS (which has a different priority)
    scsi.next = &ram;
    sprintf(ram.drive[0].discname, "RAMDisc0");
    baricon_list = baricon_update(baricon_list, &ram, NULL);
    CHECK_EQ(last_create.window, -5)
    CHECK_EQ(last_create.priority, 0x40000000);

    // Clear everything
    for (n = 0; n< 8; ++n)
    {
        adfs.drive[n].discname[0] = '\0';
        scsi.drive[n].discname[0] = '\0';
        ram.drive[n].discname[0]  = '\0';
    }

    baricon_list = baricon_update(baricon_list, &adfs, NULL);
    CHECK_IS_NULL(baricon_list);
    create_count = 0;

    sprintf(scsi.drive[5].discname, "SCSIdisc5");
    baricon_list = baricon_update(baricon_list, &adfs, NULL);

    sprintf(adfs.drive[4].discname, "Harddisc4");
    baricon_list = baricon_update(baricon_list, &adfs, NULL);

    CHECK_EQ(last_create.window,  -3)
    CHECK_EQ(last_create.priority, 1)

    // Clear everything
    for (n = 0; n< 8; ++n)
    {
        adfs.drive[n].discname[0] = '\0';
        scsi.drive[n].discname[0] = '\0';
    }
    create_count = 0;

    sprintf(adfs.drive[6].discname, "Harddisc6");
    baricon_list = baricon_update(baricon_list, &adfs, NULL);

    sprintf(scsi.drive[4].discname, "SCSIdisc4");
    baricon_list = baricon_update(baricon_list, &adfs, NULL);

    CHECK_EQ(last_create.window,  -4)
    CHECK_EQ(last_create.priority, 1)
}

void test_refresh(void)
{
    FS adfs;
    BarIcon *baricon_list = 0;
    Icon icon;
    strcpy(icon.sprite, "switcher");
    icon.fsnumber = 8;
    icon.disc[0] = '\0';
    icon.drives = 1<<4;
    icon.next = NULL;

    init_fs(&adfs, fsnumber_adfs, "ADFS");

    create_count = 0;
    update_count = 0;
    delete_count = 0;

    strcpy(adfs.drive[4].discname, "Harddisc4");
    baricon_list = baricon_update(baricon_list, &adfs, NULL);

    CHECK_EQ(create_count, 1);
    CHECK_EQ(last_create.window, -5)
    CHECK_EQ(last_create.priority, 0x70000000)
    CHECK_EQ(baricon_list->handle, 1)

    sprintf(adfs.drive[4].discname, "Harddisk4");

    baricon_refresh(baricon_list, &adfs, &icon);

    CHECK_EQ(create_count, 1);
    CHECK_EQ(update_count, 1);
    CHECK_STRING(last_update.text,       "Harddisk4");
    CHECK_STRING(last_update.validation, "Sswitcher");

    strcpy(icon.sprite, "harddisc");
    baricon_refresh(baricon_list, &adfs, &icon);

    CHECK_EQ(create_count, 1);
    CHECK_EQ(update_count, 2);
    CHECK_STRING(last_update.text ,      "Harddisk4");
    CHECK_STRING(last_update.validation, "Sharddisc");
}

void test_cleanup(void)
{
    FS adfs;
    BarIcon *baricon_list = 0;
    Icon icon;
    strcpy(icon.sprite, "harddisc");
    icon.fsnumber = 8;
    icon.disc[0] = '\0';
    icon.drives = 1<<4 | 1<<5;
    icon.next = NULL;

    init_fs(&adfs, fsnumber_adfs, "ADFS");

    create_count = 0;
    update_count = 0;
    delete_count = 0;

    strcpy(adfs.drive[4].discname, "Harddisc4");
    strcpy(adfs.drive[5].discname, "Harddisc5");

    baricon_list = baricon_update(baricon_list, &adfs, &icon);

    CHECK_EQ(create_count, 2);

    baricon_list = baricon_update(baricon_list, NULL, NULL);

    CHECK_EQ(delete_count, 2);
}

int main(void)
{
    test_update();
    test_positioning();
    test_refresh();
    test_cleanup();
}
