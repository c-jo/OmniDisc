#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "Icon.h"
#include "StringUtils.h"

#ifdef FORTIFY
#include "fortify.h"
#endif

static _kernel_oserror err_Memory      = { 0, "Couldn't allocate memory" };
static _kernel_oserror err_NotFound    = { 0, "Icon not found." };
static _kernel_oserror err_AlreadySet  = { 0, "Icon already set" };

/*******************************************************************
 Function:      icon_add
 Description:   Adds an icon for the given fs,disc and drive.
 Parameters:    list  -> current head of the icons list
                fs    -> the name of the filing system, or NULL
                disc  -> the name of the disc, or NULL
                drive  = the drive number, or -1
                sprite-> the name of the sprite to use.
 Returns:       pointer to the new head of the icon list.
 ******************************************************************/
_kernel_oserror *icon_add(Icon** list,
                          const char *sprite,
                          int fsnumber,
                          const char *disc,
                          int drives)
{
    Icon *icon, *last = *list;
    for (icon = *list; icon; icon = icon->next)
    {
        if (icon->fsnumber == fsnumber &&
            !strcmp(icon->disc, disc ? disc : "") &&
            icon->drives == drives)
            return &err_AlreadySet;
    }

    icon = malloc(sizeof(Icon));
    if (!icon)
        return &err_Memory;

    strcpy(icon->sprite, sprite);
    icon->fsnumber = fsnumber;
    strcpy(icon->disc, disc ? disc : "");
    icon->drives = drives;
    icon->next = 0;

    while (last && last->next != NULL)
        last = last->next;

    if (last)
        last->next = icon;
    else
        *list = icon;

    return 0;
}

/*******************************************************************
 Function:      icon_update
 Description:   Updates an icon for the given fs,disc and drive.
                sprite  -> name of the sprite to use
                fsnumber = filing system number, or -1 for any
                disc    -> disc name, or NULL for any
                drives   = drive map, or -1
 Returns:       error or NULL
 ******************************************************************/
_kernel_oserror *icon_update(Icon** list, const char *sprite,
                     int fsnumber, const char *disc, int drives)
{
    Icon *i = *list;
    bool updated = false;

    while (i)
    {
        if ( (i->fsnumber == fsnumber) &&
             (!stricmp(i->disc, disc ? disc : "")) &&
             (i->drives == drives) )
        {
            strcpy(i->sprite, sprite);
            updated = true;
        }
        i = i->next;
    }

    if (!updated)
        return &err_NotFound;

    return 0;
}

/*******************************************************************
 Function:      icon_remove
 Description:   Removes an icon for the given fs,disc and drive.
 Parameters:    list  -> current head of the icons list
                fs    -> the name of the filing system, or NULL
                disc  -> the name of the disc, or NULL
                drive  = the drive number, or -1
 Returns:       pointer to the new head of the icon list.
 ******************************************************************/
_kernel_oserror *icon_remove(Icon** list,
                     int fsnumber, const char *disc, int drives)
{
    Icon *i = *list;
    Icon *head = NULL, *last = NULL;
    bool removed= false;

    while (i)
    {
        bool remove =
            (i->fsnumber == fsnumber) &&
            (!stricmp(i->disc, disc ? disc : "")) &&
            (i->drives == drives);

        if (remove)
        {
            Icon *d = i;
            if (last) last->next = i->next;
            i = i->next;
            free(d);
            removed = true;
        }
        else
        {
            last = i;
            if (!head) head = i;
            i = i->next;
        }
    }

    *list = head;

    if (!removed)
        return &err_NotFound;

    return 0;
}

/*******************************************************************
 Function:      icon_remove_fs
 Description:   Removes all icon for the given fs. Such as when
                removing it.
 Parameters:    list    -> current head of the icons list
                fsnumber = the name filing system number.
 Returns:       Void
 ******************************************************************/
void icon_remove_fs(Icon** list, int fsnumber)
{
    Icon *i = *list;
    Icon *head = NULL, *last = NULL;

    while (i)
    {
        if (i->fsnumber == fsnumber)
        {
            Icon *d = i;
            if (last) last->next = i->next;
            i = i->next;
            free(d);
        }
        else
        {
            last = i;
            if (!head) head = i;
            i = i->next;
        }
    }

    *list = head;
}

/*******************************************************************
 Function:      icon_match
 Description:   Determine a match value for the given icon with the
                specified fs/disc/drive.
 Parameters:    icon  -> icon to check
                fs    -> the name of the filing system, or NULL
                disc  -> the name of the disc, or NULL
                drive  = the drive number, or -1
 Returns:       Match value (higher is better) or -1 for no match.
 ******************************************************************/
int icon_match(Icon *icon,
               int fsnumber, const char *disc, int drive)
{
    int match = 0;

    if (icon->fsnumber != -1)
    {
        if (icon->fsnumber == fsnumber)
            match += 1;
        else
            return 0;
    }

    if (icon->drives != -1)
    {
        if (icon->drives & 1<<drive)
            match += 2;
        else
           return 0;
    }

    if (icon->disc[0] != 0)
    {
        if (!stricmp(icon->disc, disc))
            match += 3;
        else
            return 0;
    }
    return match + 1;
}

/*******************************************************************
 Function:      icon_find
 Description:   Find the best icon to use for the given fs/disc/drive.
 Parameters:    list  -> list of icons.
                fs    -> the name of the filing system, or NULL
                disc  -> the name of the disc, or NULL
                drive  = the drive number, or -1
 Returns:       Sprite name to use.
 ******************************************************************/
const char *icon_find(Icon* list,
                      int fsnumber,  const char *disc, int drive)
{
    const char *s = 0;
    int t = 0;

    while (list)
    {
         int m = icon_match(list, fsnumber, disc, drive);
         if (m > t)
         {
             s = list->sprite;
             t = m;
         }
         list = list->next;
    }

    if (s)
        return s;

    return (drive < 4) ? "floppydisc" : "harddisc";
}

