#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "Icon.h"

#ifdef FORTIFY
#include "fortify.h"
#endif

static int stricmp(const char *s1, const char *s2)
{
     while (*s1 != 0)
         if (toupper(*s1++) != toupper(*s2++)) return 1;
     return 0;
}

_kernel_oserror *icon_command(Icon **icons, const char *cmd)
{
    static unsigned ra_buf[64];
    _kernel_oserror *e = 0;
    e = _swix(OS_ReadArgs, _INR(0,3),
                  "fs/K,disc/K,drive/K,icon,delete/S,f/S,h/S",
                  cmd, &ra_buf, sizeof(ra_buf));
    if (e)
        return e;

    if (ra_buf[43] == 0)
    {
        Icon *icon = malloc(sizeof(Icon));
        icon->next = *icons;
        icon->floppy = true;
        icon->winnie = true;

        strcpy(icon->fs,   ra_buf[0] ? (char*)ra_buf[0] : "");
        strcpy(icon->disc, ra_buf[1] ? (char*)ra_buf[1] : "");

        if (ra_buf[2])
            icon->drive = atoi((char*)ra_buf[1]);
        else
            icon->drive = -1;

        if (ra_buf[3])
        {
            icon->val[0] = 'S';
             strcpy(icon->val+1, (char*)ra_buf[3]);
        }
        else
            icon->val[0] = 0;

        *icons = icon;
    }
    else
    {
        // Delete
    }
    return 0;
}
/*******************************************************************
 Function:      icon_add
 Description:   Adds an icon for the given fs,disc and drive.
 Parameters:    icons -> current head of the icons list
                fs    -> the name of the filing system, or NULL
                disc  -> the name of the disc, or NULL
                drive  = the drive number, or -1
                sprite-> the name of the sprite to use.
 Returns:       pointer to the new head of the icon list.
 ******************************************************************/
Icon* icon_add(Icon* icons, const char *sprite,
               const char *fs, const char *disc, int drive)
{
    Icon *last = icons;
    Icon *newicon = malloc(sizeof(Icon));

    while (last && last->next != NULL)
        last = last->next;

    newicon->val[0] = 'S';
    strcpy(newicon->val+1, sprite);
    strcpy(newicon->fs,    fs   ? fs   : "");
    strcpy(newicon->disc,  disc ? disc : "");
    newicon->drive = drive;
    newicon->floppy = true;
    newicon->winnie = true;
    newicon->next   = 0;

    if (last)
        last->next = newicon;

    return icons ? icons : newicon;
}

/*******************************************************************
 Function:      icon_remove
 Description:   Removes an icon for the given fs,disc and drive.
 Parameters:    icons -> current head of the icons list
                fs    -> the name of the filing system, or NULL
                disc  -> the name of the disc, or NULL
                drive  = the drive number, or -1
 Returns:       pointer to the new head of the icon list.
 ******************************************************************/
Icon* icon_remove(Icon* icons,
                  const char *fs, const char *disc, int drive)
{
    Icon *i = icons;
    Icon *head = 0, *last = 0;

    while (i)
    {
        bool remove =
            (!stricmp(i->fs,   fs   ? fs   : "")) &&
            (!stricmp(i->disc, disc ? disc : "")) &&
            (i->drive == drive);

        if (remove)
        {
            Icon *d = i;
            if (last) last->next = i->next;
            i = i->next;
            free(d);
        }
        else
        {
            last = i;
            if (!head) head = i;
            i = i->next;
        }
    }
    return head;
}

int icon_match(Icon* icon, const char *fs, int drive, const char *discname)
{
    int match = 0;
    if (drive < 4 && !icon->floppy) return 0;
    if (drive > 3 && !icon->winnie) return 0;

    if (icon->fs[0] != 0)
    {
        if (!stricmp(icon->fs, fs))
            match += 1;
        else
            return 0;
    }

    if (icon->drive != -1)
    {
        if (icon->drive == drive)
            match += 2;
        else
           return 0;
    }

    if (icon->disc[0] != 0)
    {
        if (!stricmp(icon->disc, discname))
            match += 3;
        else
            return 0;
    }
    return match + 1;
}

const char *icon_find(Icon* icons, const char *fs, int drive, const char *discname)
{
    const char *v = 0;
    int s = 0;

    while (icons)
    {
         int t = icon_match(icons, fs, drive, discname);
         if (t > s)
         {
             v = icons->val;
             s = t;
         }
         icons = icons->next;
    }

    if (v)
        return v;

    return (drive < 4) ? "Sfloppydisc" : "Sharddisc";
}

