#include "kernel.h"
#include "FilerXHdr.h"
#include "FilerX.h"
#include "FindDrives.h"
#include "ShareFS.h"
#include "Icon.h"

#include "kernel.h"
#include "swis.h"
#include "wimp.h"

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#ifdef FORTIFY
#include "fortify.h"
#endif

#define UpcallV 0x1d

unsigned task_handle;
unsigned pollword;
bool     sharefs;

FS    *fses;
Icon  *icons;

/*******************************************************************
 Function:      fs_drive_name
 Description:   Read the name of a drive
 Parameters:    FS  => FS info structure
                drive = drive number
 Returns:       pointer to the drive name or NULL. This pointer is
                only valid until the next call.
 ******************************************************************/
static char *fs_drive_name(FS* fs, int drive)
{
    static char buffer[12];

    char disc_record[0x40] = {0};
    char name[32];
    int i;

    if (fs->fsparams->swi_describedisc == FSP_NO_SWI)
        return NULL; // Error doing SWI lookup

    if (drive < 4 && !fs->fd_names)
        return NULL; // Floppy disc

    sprintf(name, ":%d", drive);
    if (_swix(fs->fsparams->swi_describedisc, _INR(0,1), &name, &disc_record))
       return NULL; // Error calling describe disc

    for (i=0; i<10; ++i)
    {
        char c = disc_record[0x16+i];
        if (c == ' ' || c == '\0')
            break;

        buffer[i] = c;
    }
    buffer[i] = '\0'; // Terminate string

    return buffer;
}

static void add_drive(FS *fs, int drive, const char *name,
                      bool is_removeable, bool is_ejectable, bool is_floppy)
{
    Drive *drv = &(fs->drive[drive]);

    if (name)
        strncpy(drv->discname, name, 10);
    else
        sprintf(drv->discname, ":%i", drive);

    drv->discname[10] = '\0';
    drv->validation = icon_find(icons, fs->fsparams->name, drive, drv->discname);

    drv->is_removeable = is_removeable;
    drv->is_ejectable = is_ejectable;
    drv->is_floppy = is_floppy;

    pollword |= Pollword_Drive;
    printf("Adding drive %s %d %s\n", fs->fsparams->name, drive, name ? name : "<No name>");
}

static void remove_drive(FS *fs, int drive)
{
    Drive *drv = &(fs->drive[drive]);
    drv->validation = NULL;

    pollword |= Pollword_Drive;
}

static void find_drives(FS *fs)
{
    unsigned long flags = FFMD_REPORT_REMOVABLE | FFMD_REPORT_FIXED | FFMD_NAME_FIXED;
    if (fs->fd_names)
        flags |= FFMD_NAME_REMOVABLE;
    find_filecore_module_drives(fs->fsparams, flags,
                                (found_filecore_drive_f)add_drive, fs);
}

static _kernel_oserror err_no_memory  = { 0, "No memory" };
static _kernel_oserror err_bad_module = { 0, "Bad module name" };
static _kernel_oserror err_cannot_add = { 0, "Cannot add filing system registration" };

static _kernel_oserror* add_fs(const char *module, bool fd_names)
{
    FS *fs;
    int n;
    if (strlen(module) > 11)
        return &err_bad_module;

    fs = malloc(sizeof(FS));
    if (!fs)
        return &err_no_memory;

    fs->fsparams = fsparams_create(module);
    if (fs->fsparams == NULL)
        return &err_cannot_add; /* Not ideal - we cannot differentiate memory and FS problems */
    fs->fd_names = fd_names;

    for (n=0; n<8; ++n)
    {
        fs->drive[n].is_removeable = false;
        fs->drive[n].is_ejectable  = false;
        fs->drive[n].is_floppy     = false;

        fs->drive[n].discname[0] =  0;
        fs->drive[n].validation  =  0;
        fs->drive[n].baricon     = -1;
        fs->drive[n].share       = ShareUnknown;
    }

    fs->next = fses;
    fses     = fs;

    find_drives(fs);
    pollword |= Pollword_FS;
    return 0;
}


/*******************************************************************
 Function:      fsdrive_tool_command
 Description:   Read the command for a given tool on a drive
 Parameters:    fs-> the FS to invoke on
                drive = the drive number
                tooloperation = the operation to perform
 Returns:       pointer to read only command to use, or NULL if not available
 ******************************************************************/
static const char *fsdrive_tool_command(FS *fs, int drive,
                                         tooloperation_t tooloperation)
{
    Drive *drv = &fs->drive[drive];
    tooldisctype_t tooldisctype = drv->is_floppy ? tdt_floppy : tdt_hard;
    const char *cmd;

    cmd = build_tool_command(tooloperation,
                             tooldisctype,
                             fs->fsparams->fsname,
                             false,
                             drive);
    return cmd;
}

/*******************************************************************
 Function:      fsdrive_tool_capable
 Description:   Check if we can invoke the external tools for this drive
 Parameters:    fs-> the FS to invoke on
                drive = the drive number
                tooloperation = the operation to perform
 Returns:       true if we can use this tool, false if we cannot
 ******************************************************************/
bool fsdrive_tool_capable(FS *fs, int drive,
                          tooloperation_t tooloperation)
{
    const char *cmd = fsdrive_tool_command(fs, drive, tooloperation);
    return cmd == NULL ? false : true;
}

/*******************************************************************
 Function:      fsdrive_tool_invoke
 Description:   Invoke one of the external tools.
 Parameters:    fs-> the FS to invoke on
                drive = the drive number
                tooloperation = the operation to perform
 Returns:       pointer to error, or NULL if successful
 ******************************************************************/
_kernel_oserror *fsdrive_tool_invoke(FS *fs, int drive,
                                     tooloperation_t tooloperation)
{
    const char *cmd = fsdrive_tool_command(fs, drive, tooloperation);

    if (cmd)
    {
        return _swix(Wimp_StartTask, _IN(0), cmd);
    }
    else
    {
        /* FIXME: Report that there's no tool available? */
    }

    return NULL;
}

/*******************************************************************
 Function:      fsdrive_share
 Description:   Share (or unshare) a drive.
 Parameters:    fs-> the FS to invoke on
                drive = the drive number
                sharetype = How to share
 Returns:       pointer to error, or NULL if successful
 ******************************************************************/
_kernel_oserror *fsdrive_share(FS *fs, int drive,
                               ShareType sharetype)
{
    _kernel_oserror *e = 0;
    char *discname = fs->drive[drive].discname;
    char path[32];
    sprintf(path, "%s::%s.$", fs->fsparams->name, discname);

    if (fs->drive[drive].share != sharetype)
    {
        switch (sharetype)
        {
        case NotShared:
            e = _swix(ShareFS_StopShare, _INR(0,1), 0,
                          discname);
            break;
        case ShareProtected:
            e = _swix(ShareFS_CreateShare, _INR(0,2), 
                          ShareFS_ShareProtected,
                          discname, path);
            break;
        case ShareUnprotected:
            e = _swix(ShareFS_CreateShare, _INR(0,2), 0,
                          discname, path);
            break;
        }
        if (!e)
            fs->drive[drive].share = sharetype;
     }
     return e;
}

static _kernel_oserror*cmd_desktop(const char* arg_string, void *pw)
{
    UNUSED(pw);

    if (task_handle == 0 || task_handle == -1)
    {
        return _swix(OS_Module, _INR(0,2), 2, Module_Title, arg_string);
    }
    return 0;

}

static _kernel_oserror*cmd_add_fs(const char* arg_string, void *pw)
{
    static unsigned ra_buf[64];
    _kernel_oserror *e = 0;

    UNUSED(pw);

    e = _swix(OS_ReadArgs, _INR(0,3),
                  "fs/A,fdnames/S",
                  arg_string, &ra_buf, sizeof(ra_buf));
    if (e)
        return e;

    return add_fs((char*)ra_buf[0], ra_buf[1] == 0 ? false : true);

}

_kernel_oserror *module_cmd(const char *arg_string, int argc, int cmd_no,
                            void *pw)
{
    switch (cmd_no)
    {
        case CMD_Desktop_FilerX:
            return cmd_desktop (arg_string, pw);
            
        case CMD_FilerX_AddFS:
            return cmd_add_fs(arg_string, pw);

        case CMD_FilerX_DriveIcon:
            pollword |= Pollword_Icon;
            return icon_command(&icons, arg_string);
    }
    return 0;
}

_kernel_oserror *module_initialise(const char *cmd_tail, int podule_base,
                                   void *pw)
{
    UNUSED(cmd_tail);
    UNUSED(podule_base);

    task_handle = 0;
    pollword    = 0;

    fses   = NULL;
    icons  = NULL;

    sharefs = _swix(OS_SWINumberFromString, _IN(1), "ShareFS_CreateShare") == NULL;

#ifdef FORTIFY
    Fortify_EnterScope();
#endif

    return _swix(OS_Claim, _INR(0,2), UpcallV, &upcall_entry, pw);
}

_kernel_oserror *module_finalise(int fatal, int podule_base, void *pw)
{
    FS *fs = fses;
    Icon *icon = icons;

    UNUSED(fatal);
    UNUSED(podule_base);

    if (task_handle != 0 && task_handle != -1)
        _swix(Wimp_CloseDown, _INR(0,1), task_handle, 0x4b534154);

    _swix(OS_Release, _INR(0,2), UpcallV, &upcall_entry, pw);

    while (fs)
    {
        FS *x = fs;
        fs = fs->next;
        fsparams_destroy(x->fsparams);
        free(x);
    }

    while (icon)
    {
        Icon *x = icon;
        icon = icon->next;
        free(x);
    }

#ifdef FORTIFY
    Fortify_LeaveScope();
#endif

    return NULL;
}

void module_service(int service_number, _kernel_swi_regs *r, void *private_word)
{
    UNUSED(private_word);
    switch (service_number)
    {
    case 0x27: // Service_Reset
    case 0x4c: // Service_StartedFiler
        task_handle = 0;
        break;

    case 0x4b: // Service_StartFiler
        if (task_handle == 0)
        {
            task_handle = -1;
            r->r[0] = (int)"%Desktop_FilerX";
            r->r[1] = 0; // Claim
        }
        break;

    case 0x4f: // Service_FilerIsDying
        if (task_handle > 0)
        {
            WimpMessage msg;
            msg.hdr.size        = 20;
            msg.hdr.your_ref    = 0;
            msg.hdr.action_code = 0;
            if (!_swix(Wimp_SendMessage, _INR(0,2), 17, &msg, task_handle))
                task_handle = 0;
        }
        break;

    case Service_ShareFSStarting:
        sharefs = true;
        break;

    case Service_ShareFSDying:
        sharefs = false;
        break;
    }
}

_kernel_oserror *upcall_handler(_kernel_swi_regs *r, void *pw)
{
    unsigned upcall = r->r[0];
    UNUSED(pw);

    if (upcall == 24 || upcall == 25) // UpCall_DriveAdded UpCall_DriveRemoved
    {
        const char *drivespec = (const char*)r->r[1];
        if (drivespec)
        {
            const char *pos   = strchr(drivespec, ':');
            const char *disc  = pos+1;
            unsigned    fslen = (pos-drivespec);
            int         drive = -1;
            FS *fs;

            if (strlen(disc) == 2 || disc[0] == ':')
                drive = disc[1] - '0';

            if (drive< 0 || drive > 7)
                return 0;

            for (fs = fses; fs; fs = fs->next)
            {
                if ( strlen(fs->fsparams->fsname) == fslen &&
                    !strncmp(drivespec, fs->fsparams->fsname, fslen))
                {
                    if (upcall == 24)
                    {
                        /* Drive added - we don't know if it's removeable, ejectable or floppy style from here */
                        add_drive(fs, drive, fs_drive_name(fs, drive), false, false, false);
                    }

                    if (upcall == 25)
                        remove_drive(fs, drive);
                }
            }
        }
    }

    return 0;
}

