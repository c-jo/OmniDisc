#include "BarIcon.h"
#include "Icon.h"
#include "FSDefaults.h"

#include <string.h>
#include <stdio.h>

#include "swis.h"

static void *rmalloc(size_t size)
{
    void *ptr;
    if  (_swix(OS_Module, _IN(0)|_IN(3)|_OUT(2), 6, size, &ptr)) return 0;
    return ptr;
}

static void rmfree(void *ptr)
{
    _swix(OS_Module, _IN(0)|_IN(2), 7, ptr);
}

/*******************************************************************
 Function:      baricon_position
 Description:   Determines where to put an icon on the icon bar. Icon
                and pos will be updated with the icon to create next to
                or the priority. Pos will be set to the positon io the
                icobar. These values can be used with Wimp_CreateIcon.
 Parameters:    fs_list      => list of file sstems
                baricon_list => list of bar icons
                fsnumber = fs number to create the icon for
                drive    = drive to create the icon far
                icon  => updated with icon handle or priority
                pos   => updated with position
 Returns:       Nothing, but *icon and *pos will be updated.
 ******************************************************************/
static void baricon_position(FS *fs_list, BarIcon *baricon_list,
                             int fsnumber, int drive, int *pos, int *icon)
{
    int clown = -2; // Clowns to the left of me
    int joker = -2; // Jokers to my right
    FS *fs;
    bool is_removeable = false;
    int n;

    /* We want to only consider filing systems which have the same priority
     * as the drive we're adding, so that we add similar filing systems in
     * consistent order together.
     * First we find the drive in the current list of filesystems so that we
     * can add it appropriately.
     */
    unsigned long priority = 0;

    for (fs = fs_list; fs; fs = fs->next)
    {
        if (fs->fsparams->fsnumber == fsnumber)
        {
            priority = fsdefaults_priority(fsnumber,
                                           fs->drive[drive].is_removeable);
        }
    }

    // Find an icon to put ours next to, if we can
    for (fs = fs_list; fs; fs = fs->next)
    {
        int fsn = fs->fsparams->fsnumber;
        for (n = 0; n < 8; ++n)
        {
            int pri = fsdefaults_priority(fsnumber, fs->drive[n].is_removeable);
#ifdef DEBUG
            printf("FS %i, drive %i has priority %08x (we want %08x)\n", fsn, n, pri, priority);
#endif
            if (priority != 0 && pri != priority)
            {
                /* Skip this drive as it's not in the same priority group */
                continue;
            }

            if (fsn == fsnumber && n == drive)
            {
#ifdef DEBUG
                printf("FS:%d Drive:%d is the icon to insert.\n", fsn, n);
#endif
                if (clown == -2)
                    clown = -1;
                joker = -1;
            }
            else
            {
                BarIcon *bi = baricon_find(baricon_list, fsn, n);
#ifdef DEBUG
                printf("Icon for FS:%d Drive:%d %s found.\n", fsn, drive,
                       (bi == 0 ? "Not" : "WAS"));
#endif
                if (bi != NULL)
                {
                    if (joker ==  -2)
                        clown = bi->handle;
                    else if (joker == -1)
                        joker = bi->handle;
                }
            }
#ifdef DEBUG
            printf("FS:%d Drive:%d : %d,%d\n",
                fs->fsparams->fsnumber, n,
                clown, joker);
#endif
        }
    }

    if (clown >= 0)
    {
        *pos = -4;     // To the right of
        *icon = clown; // Icon to the left.
    }
    else if (joker >= 0)
    {
        *pos  = -3;    // To the left of
        *icon = joker; // Icon to the right.
    }
    else
    {
        /* There was no existing icon for this filing system, so we just place
         * it on the left with the default priority for that filing system. */
        *pos  = -5;       // Left side, high
        *icon = priority; // priority
    }
}

/*******************************************************************
 Function:      baricon_update
 Description:   Update the icon bar icons based on the available
                drives in the filing systems in fslist. Icons will
                be created using sprites defined in iconlist.
                icons will be created by calling baricon_create_icon
                and deleted by calling baricon_delete_icon (see
                above).
 Parameters:    list     -> head of the baricon list
                fslist   -> list of file systems
                iconlist -> list of icons
 Returns:       pointer to the new head of the list.
 ******************************************************************/
BarIcon *baricon_update(BarIcon *list, FS* fslist, Icon *iconlist)
{
    FS *fs;
    BarIcon *bi = list, *last = NULL;

    /* Remove any icons for drives that no longer exist */
    while (bi)
    {
        fs = fs_find_by_number(fslist, bi->fsnumber);

        if (!fs || fs->drive[bi->drive].discname[0] == '\0')
        {
            BarIcon *d = bi;
            if (bi->prev) bi->prev->next = bi->next;
            if (bi->next) bi->next->prev = bi->prev;

            // If we were the head of the list then update it
            if (list == bi)
                list = bi->next;

            // Move onto the nxt item
            bi = bi->next;

            // Delete this one
            baricon_delete_icon(d->handle);
            rmfree(d);
        }
        else
        {
            last = bi;
            bi = bi->next;
        }
    }

    /* Add any icons for drives that don't have them */
    for (fs = fslist; fs; fs = fs->next)
    {
        int n;
        for (n=0;  n<8; ++n)
        {
            if (fs->drive[n].discname[0] != '\0')
            {
                if (!baricon_find(list, fs->fsparams->fsnumber, n))
                {
                   int window, priority;
                    BarIcon *icon = rmalloc(sizeof(BarIcon));

                    icon->fsnumber = fs->fsparams->fsnumber;
                    icon->drive    = n;
                    strncpy(icon->text, fs->drive[n].discname, 11);

                    icon->validation[0] = 'S';
                    strncpy((icon->validation)+1,
                             icon_find(iconlist, fs->fsparams->fsnumber,
                                       fs->drive[n].discname, n), 13);

                    baricon_position(fslist, list, fs->fsparams->fsnumber, n,
                                     &window, &priority);

                    icon->handle = baricon_create_icon(
                                       icon->text, icon->validation, 12,
                                       window, priority);

                    icon->next = NULL;
                    icon->prev = last;

                    if (last)
                        last->next = icon;
                    else
                        list = icon;

                    last = icon;
                }
            }
        } // for n
    } // for fs
    return list;
}

/*******************************************************************
 Function:      baricon_refresh
 Description:   Check all the icons in list to see if the text or
                validation needs to be updated (because a disc name or
                sprite has changed). Icons will be updated by calling
                baricon_update_icon (see above).
Parameters:    list     -> head of the baricon list
                fslist   -> list of file systems
                iconlist -> list of icons
 Returns:       Nothing.
 *****************************************************************/
void baricon_refresh(BarIcon *list, FS* fslist, Icon *iconlist)
{
    BarIcon *icon;
    for (icon = list; icon; icon=icon->next)
    {
        FS *fs = fs_find_by_number(fslist, icon->fsnumber);
        const char *new_sprite;
        char *discname = fs ? fs->drive[icon->drive].discname : "\0";
        bool update = false;

        if (!fs || discname[0] == '\0')
            continue;

        new_sprite = icon_find(iconlist, fs->fsparams->fsnumber,
                               discname, icon->drive);

        if (strcmp(icon->validation+1, new_sprite))
        {
            strncpy((icon->validation)+1, new_sprite, 13);
            update = true;
        }

        if (strcmp(icon->text, discname))
        {
            strncpy(icon->text, discname, 11);
            update = true;
        }

        if (update)
            baricon_update_icon(icon->handle, icon->text, icon->validation);
    }
}

BarIcon* baricon_find(BarIcon *list, int fsnumber, int drive)
{
    BarIcon *i;
    for (i=list; i; i=i->next)
        if (i->fsnumber == fsnumber && i->drive == drive)
            break;
    return i;
}

BarIcon* baricon_find_icon(BarIcon *list, int handle)
{
    BarIcon *i;
    for (i=list; i; i=i->next)
        if (i->handle == handle)
            break;

    return i;
}
