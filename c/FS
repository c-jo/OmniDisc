#include "FS.h"
#include "StringUtils.h"
#include "Errors.h"

#include <stdlib.h>
#include <string.h>

/*******************************************************************
 Function:      fs_add
 Description:   Adds a FS for the given fs_params.
 Parameters:    list   -> current head of the FS list
                params -> the FS params block for the FS to be added.
                          the list takes ownership of this pointer:
                          it will be free()d on fs_remove()
                newfs  -> pointer to update with the new FS, or NULL
 Returns:       pointer to the new head of the FS list.
 ******************************************************************/
_kernel_oserror *fs_add(FS **list, fsparameters_t *params, FS** newfs)
{
    FS *fs;
    FS *last = *list;
    int n;

    while (last && last->next)
    {
        if (last->fsparams->fsnumber == params->fsnumber)
            return get_error(Error_FSAlreadyReg);

        last = last->next;
    }
    if (last && last->fsparams->fsnumber == params->fsnumber)
        return get_error(Error_FSAlreadyReg);

    fs  = malloc(sizeof(FS));
    if (!fs)
    {
        *newfs = 0;
        return get_error(Error_NoMemory);
    }

    fs->fsparams = params;

    for (n=0; n<8; ++n)
    {
        fs->drive[n].is_removeable = false;
        fs->drive[n].is_ejectable  = false;
        fs->drive[n].is_floppy     = false;
        fs->drive[n].discname[0]   = '\0';
        fs->drive[n].share         = ShareUnknown;
    }

    fs->next = NULL;
    if (last)
        last->next= fs;
    else
        *list = fs;

    *newfs = fs;
    return 0;
}

/*******************************************************************
 Function:      fs_remove
 Description:   Removes a FS for the given fs_params.
 Parameters:    list   -> current head of the FS list
                fsname -> the name of the FS to remove.
 Returns:       pointer to the new head of the FS list.
 ******************************************************************/
_kernel_oserror* fs_remove(FS **list, const char *fsname)
{
    FS *head = NULL, *last= NULL;
    FS *i = *list;
    int removed = 0;

    while (i)
    {
        if (!strcmp(i->fsparams->fsname, fsname))
        {
            FS *d = i;
            i = i->next;
            if (last) last->next = i;
            fsparams_destroy(d->fsparams);
            free(d);
            ++removed;
        }
        else
        {
            if (head == NULL) head = i;
            last = i;
            i = i->next;
        }
    }

    if (!removed)
        return get_error(Error_FSNotRegistered);

    *list = head;
    return 0;
}

/*******************************************************************
 Function:      fs_find_by_number
 Description:   Find a FS for the given fs number
 Parameters:    list    -> current head of the FS list
                fsnumber = the FS number to find
 Returns:       pointer to the FS, or NULL if not found.
 ******************************************************************/
FS* fs_find_by_number(FS *list, int fsnumber)
{
    for (; list; list=list->next)
        if (list->fsparams->fsnumber == fsnumber)
            break;
    return list;
}

/*******************************************************************
 Function:      fs_find_by_name
 Description:   Find a FS for the given name.
 Parameters:    list   -> current head of the FS list
                fsname -> name of the FS to find
 Returns:       pointer to the FS, or NULL if not found.
 ******************************************************************/
FS* fs_find_by_name(FS *list, const char *fsname)
{
    for (; list; list=list->next)
        if (!stricmp(list->fsparams->fsname, fsname))
            break;
    return list;
}

/*******************************************************************
 Function:      fs_get_default_dir
 Description:   Find tne default directory for a given FS / drive.
 Parameters:    FS   -> the FS object
                drive = the FS name to find.
 Returns:       the default directory for the given FS / drive. The
                sting should be copied before the next call.
 ******************************************************************/
char *fs_get_default_dir(FS *fs, int drivenumber)
{
    return "$";
}
