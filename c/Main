#include "OmniDisc.h"
#include "Tools.h"
#include "Wimp.h"

#include "swis.h"

#include "kernel.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef FORTIFY
#include "fortify.h"
#endif

#include "ShareFS.h"
#include "BarIcon.h"
#include "StringUtils.h"

/* Define this to add in the support for checking discs */
#define SUPPORT_CHECK
/* Define this to add in the support for ejecting discs */
#define SUPPORT_EJECT

#define FILETYPE_SPRITE 0xff9

static char *share_styles[] =
    { "Not shared", "Share protected", "Share unprotected" };

// static unsigned tray_window = 0;

enum menuitems_e {
    menuitem_namedisc,
    menuitem_dismount,
#ifdef SUPPORT_EJECT
    menuitem_eject,
#endif
    menuitem_format,
    menuitem_backup,
    menuitem_share,
    menuitem_verify,
#ifdef SUPPORT_CHECK
    menuitem_check,
#endif
    menuitem_free,
    menuitem_LAST
};

static struct drive_menu_s
{
    WimpMenu menu;
    WimpMenuItem more[9];
} drive_menu;

static struct
{
    int fsnumber, drive;
    int x,y;
} menu_drive = { -1, -1, 0, 0 };

static WimpMenu name_menu;

static char new_name[12] = { 0 };

static struct share_menu_s
{
    WimpMenu menu;
    WimpMenuItem more[2];
} share_menu;

static BarIcon *baricons = 0;

static void make_menu(WimpMenu *menu, const char *title)
{
    sprintf(menu->title, title);
    menu->title_fg    = 0x07;
    menu->title_bg    = 0x02;
    menu->work_fg     = 0x07;
    menu->work_bg     = 0x00;
    menu->item_width  = 0;
    menu->item_height = 44;
    menu->gap         = 0;
}

static void make_item(WimpMenuItem* item, const char *entry,
                       void *sub_or_win, bool shaded)
{
    item->flags = 0x00;
    item->submenu_or_window = sub_or_win ? sub_or_win : (void*)-1;
    item->icon_flags = 0x07000001 | (shaded ? WimpIcon_Shaded : 0);
    strcpy(item->icon_data.t,entry);
}

static void make_item_indir(WimpMenuItem* item,
                            char *buffer, char *validation, int buflen)
{
    item->flags = 0x00;
    item->submenu_or_window = (void*)-1;
    item->icon_flags = 0x07000001 | WimpIcon_Indirected;
    item->icon_data.it.buffer      = buffer;
    item->icon_data.it.validation  = validation;
    item->icon_data.it.buffer_size = buflen == 0 ? strlen(buffer) : buflen;
}

static void make_menus(void)
{
    WimpMenu *menu = (WimpMenu*)&share_menu;
    WimpMenuItem *items = menu->items;
    make_menu(menu, "Share style");
    make_item_indir(&items[0], share_styles[0], "", 0);
    make_item_indir(&items[1], share_styles[1], "", 0);
    make_item_indir(&items[2], share_styles[2], "", 0);
    items[2].flags |= WimpMenuItem_Last;

    make_menu(&name_menu, "Disc name");
    make_item_indir(&name_menu.items[0], new_name, "A~$&%@\\^:.#*\x22| ", 11);
    name_menu.items[0].flags |=  WimpMenuItem_Writable | WimpMenuItem_Last;

    menu = (WimpMenu*)&drive_menu;
    make_menu(menu, "xxFS::x");

    items = menu->items;

    make_item(&items[menuitem_namedisc], "Name disc", &name_menu,   false);
    make_item(&items[menuitem_dismount], "Dismount",   NULL,        false);
#ifdef SUPPORT_EJECT
    make_item(&items[menuitem_eject],    "Eject",     NULL,         true );
#endif
    make_item(&items[menuitem_format], "Format...",  NULL,        true );
    make_item(&items[menuitem_backup], "Backup...",  NULL,        true );
    make_item(&items[menuitem_share ], "Share",      &share_menu, false);
    make_item(&items[menuitem_verify], "Verify...",  NULL,        true );
#ifdef SUPPORT_CHECK
    make_item(&items[menuitem_check], "Check...",  NULL,        true );
#endif
    make_item(&items[menuitem_free], "Free...",    NULL,        false);
    items[menuitem_LAST - 1].flags |= WimpMenuItem_Last;
}

static void menu_shade(WimpMenu *menu, int item, bool shaded)
{
    WimpMenuItem *items = menu->items;

    if (shaded)
        items[item].flags = items[item].flags | WimpIcon_Shaded;
    else
        items[item].flags = items[item].flags & ~WimpIcon_Shaded;
}

static void menu_tick(WimpMenu *menu, int item, bool ticked)
{
    WimpMenuItem *items = menu->items;

    if (ticked)
        items[item].flags = items[item].flags | WimpMenuItem_Ticked;
    else
        items[item].flags = items[item].flags & ~WimpMenuItem_Ticked;
}

static void get_icon_size(const char *icon, unsigned *x, unsigned *y)
{
    unsigned width,height,mode,xeig,yeig;
    *x = *y = -1;

    _swi(Wimp_SpriteOp, _IN(0)|_IN(2)|_OUTR(3,4)|_OUT(6),
                        0x28, icon, &width, &height, &mode);

    _swi(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, 4, &xeig);
    _swi(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, 5, &yeig);

    *x = width  << xeig;
    *y = height << yeig;
}

int baricon_create_icon(char *text, char *validation, int buffer_size,
                        int window_handle, int priority)
{
    unsigned xsize,ysize;
    WimpCreateIconBlock cib;
    
    get_icon_size(validation+1, &xsize, &ysize);

    cib.window_handle  = window_handle;
    cib.icon.bbox.xmin = 0;
    cib.icon.bbox.ymin = -16;
    cib.icon.bbox.xmax = xsize;
    cib.icon.bbox.ymax = 20 + ysize;
    cib.icon.flags     = 0x1700310b;
    cib.icon.data.ist.buffer      = text;
    cib.icon.data.ist.validation  = validation;
    cib.icon.data.ist.buffer_size = buffer_size;

    return _swi(Wimp_CreateIcon, _INR(0,1)|_RETURN(0), priority, &cib);
}

void baricon_delete_icon(int handle)
{
    WimpDeleteIconBlock dib;
    dib.window_handle = WimpWindow_Iconbar;
    dib.icon_handle    =handle;
    _swi(Wimp_DeleteIcon, _IN(1), &dib);
}

void baricon_update_icon(int handle, char *text, char *validation)
{
    unsigned xsize,ysize,textwidth;
    WimpGetIconStateBlock gisblock;
    WimpSetIconStateBlock sisblock;
    WimpCreateIconBlock ciblock;
    WimpDeleteIconBlock diblock;

    if (text)
    {
        // Where is the icon in question?
        gisblock.window_handle = WimpWindow_Iconbar;
        gisblock.icon_handle   = handle;
        _swix(Wimp_GetIconState, _IN(1), &gisblock);

        // How big is the icon?
        get_icon_size(validation+1, &xsize, &ysize);
        // And the text
        _swix(Wimp_TextOp, _INR(0,2) | _OUT(0),
                  1, text, 0, &textwidth);
        // Which is bigger?
        if (textwidth > xsize) xsize = textwidth;

        // Resize the icon
        _swix(Wimp_ResizeIcon, _INR(0,5),
                  WimpWindow_Iconbar, handle,
                  gisblock.icon.bbox.xmin,        -16,
                  gisblock.icon.bbox.xmin + xsize, 20+ysize);
    }

    // Refresh the icon
    sisblock.window_handle = WimpWindow_Iconbar;
    sisblock.icon_handle   = handle;
    sisblock.EOR_word = sisblock.clear_word = 0;
    _swix(Wimp_SetIconState, _IN(1), &sisblock);

    if (text)
    {
        // Create and delete a dummy icon so the icons shuffle as meeded
        ciblock.window_handle  =  -5;
        ciblock.icon.bbox.xmin =   0;
        ciblock.icon.bbox.ymin = -16;
        ciblock.icon.bbox.xmax =   2; // **TODO** could this be 0?
        ciblock.icon.bbox.ymax =  54;
        ciblock.icon.flags     =   0;

        diblock.window_handle = WimpWindow_Iconbar;
        _swix(Wimp_CreateIcon, _INR(0,1)|_OUT(0),
                  handle, &ciblock, &diblock.icon_handle);
        _swix(Wimp_DeleteIcon, _IN(1), &diblock);
    }
}

/*************************************************** Gerph *********
 Function:      menu_update
 Description:   Update the menu to reflect the selected FS and drive
 Parameters:    fs-> the FS we're operating on
                drive = the drive that's been selected
 Returns:       none
 ******************************************************************/
static void menu_update(FS *fs, int drive)
{
    sprintf(drive_menu.menu.title, "%s::%d", fs->fsparams->fsname, drive);

    /* Decide which operations are available by looking at the commands
       that can be performed. */

    //printf("Attempting shading for %s, %i\n", fs->fsparams->fsname, drive);
#ifdef SUPPORT_EJECT
    menu_shade(&drive_menu.menu, menuitem_format,
               (bool)! fs->drive[drive].is_ejectable);
#endif
    //printf("Format shading\n");

    /* Format */
    menu_shade(&drive_menu.menu, menuitem_format,
               (bool)! fsdrive_tool_capable(fs, menu_drive.drive, to_format));

#ifdef SUPPORT_CHECK
    /* Check */
    menu_shade(&drive_menu.menu, menuitem_check,
               (bool)! fsdrive_tool_capable(fs, menu_drive.drive, to_check));
#endif

    /* Share */
    menu_shade(&drive_menu.menu, menuitem_share,
               (bool)! sharefs);

    /* Verify */
    menu_shade(&drive_menu.menu, menuitem_verify,
               (bool)! fsdrive_tool_capable(fs, menu_drive.drive, to_verify));

    menu_drive.fsnumber = fs->fsparams->fsnumber;
    menu_drive.drive    = drive;
}

static void mouse_click(WimpMouseClickEvent *event)
{
    FS *fs = NULL;
    int drive = -1;

    if (event->window_handle == WimpWindow_Iconbar &&
        event->icon_handle != -1) // Icon bar
    {
        BarIcon *bi = baricon_find_icon(baricons, event->icon_handle);
        if (bi)
        {
            fs    = fs_find_by_number(fses, bi->fsnumber);
            drive = bi->drive;
        }
    }

    if (fs == NULL || drive == -1)
        return;

    if (event->buttons == 4) // Select click on drive
    {
        char cmd[48];
        if (fs->drive[drive].discname[0] == ':')
            sprintf(cmd, "%%Filer_OpenDir %s:%s.$",
                         fs->fsparams->fsname, fs->drive[drive].discname);
        else
            sprintf(cmd, "%%Filer_OpenDir %s::%s.$",
                         fs->fsparams->fsname, fs->drive[drive].discname);

        _swix(OS_CLI, _IN(0), cmd);
    }

    if (event->buttons == 2) // Menu click on drive
    {
        int n;

        menu_update(fs, drive);

        menu_drive.x = event->mouse_x;
        menu_drive.y = event->mouse_y;

        if (event->window_handle == WimpWindow_Iconbar)
        {
            menu_drive.x -= 0x40;
            menu_drive.y  = 96 + 44*menuitem_LAST;
        }

        for (n=0; n<=2; ++n)
            menu_tick(&share_menu.menu, n, fs->drive[drive].share == n);

        _swi(Wimp_CreateMenu, _INR(1,3), &drive_menu, menu_drive.x, menu_drive.y);
    }
}

static void menu_selection(WimpMenuSelectionEvent *event)
{
    int menuitem = (*event)[0];
    WimpGetPointerInfoBlock pointer_info;
    FS *fs = 0;
    Drive *drive = 0;
    char discspec[16];

    if (menu_drive.fsnumber == -1 || menu_drive.drive == -1)
        return;

    fs = fs_find_by_number(fses, menu_drive.fsnumber);
    if (fs)
        drive = &(fs->drive[menu_drive.drive]);

    if (fs == NULL || drive == NULL)
        return;

    sprintf(discspec, "%s::%i", fs->fsparams->fsname, menu_drive.drive);

    switch (menuitem)
    {
    case menuitem_namedisc:
        if ((*event)[1] == 0)
        {
            _kernel_oserror *err;
            char cmd[32];
            sprintf(cmd, "%%Filer_CloseDir %s", discspec);
            _swix(OS_CLI, _IN(0), cmd);

            err = _swix(OS_FSControl, _INR(0,2), 50, discspec, new_name);
            if (err)
                _swix(Wimp_ReportError, _INR(0,2), err, 1, 0);
            else
            {
                strcpy(drive->discname, new_name);
                pollword |= Pollword_Icon;
                //baricon_resize_icon(baricon_find(baricons, menu_drive.fsnumber, menu_drive.drive));
            }
        }
        break;
    case menuitem_dismount:
        {
            _kernel_oserror *err;
            char cmd[32];
            sprintf(cmd, "%s:%%Dismount :%s",
                              fs->fsparams->fsname,
                              drive->discname);

            err = _swix(OS_CLI, _IN(0), cmd);
            if (err)
                _swix(Wimp_ReportError, _INR(0,2), err, 1, 0);
        }
        break;
    case menuitem_share:
    {
        _kernel_oserror *err;
        ShareType sharetype = (ShareType)((*event)[1]);
        err = fsdrive_share(fs, menu_drive.drive, sharetype);
        if (err) _swix(Wimp_ReportError, _INR(0,2), err, 1, 0);
        break;
    }
#ifdef SUPPORT_EJECT
    case menuitem_eject:
        _swi(Wimp_ReportError, _INR(0,2), "0000Eject", 1, 0);
        break;
#endif
    case menuitem_backup:
        break;

    case menuitem_format:
#ifdef SUPPORT_CHECK
    case menuitem_check:
#endif
    case menuitem_verify:
        {
            tooloperation_t tooloperation;
            _kernel_oserror *err;

            if (menuitem == menuitem_format)
                tooloperation = to_format;
            else if (menuitem == menuitem_check)
                tooloperation = to_check;
            else /* Always default to verify */
                tooloperation = to_verify;

            err = fsdrive_tool_invoke(fs, menu_drive.drive,
                                      tooloperation);
            if (err)
                _swi(Wimp_ReportError, _INR(0,2), err, 1, 0);
        }
        break;

    case menuitem_free: // Free
        {
            char cmd[64];
            sprintf(cmd, "%%ShowFree -FS %s %d",
                         fs->fsparams->fsname, menu_drive.drive);
            _swix(OS_CLI, _IN(0), &cmd);
        }
        break;
    }

    _swix(Wimp_GetPointerInfo, _IN(1), &pointer_info);

    if (pointer_info.button_state & Wimp_MouseButtonAdjust)
    {
        menu_update(fs, menu_drive.drive);
        _swi(Wimp_CreateMenu, _INR(1,3),
                 &drive_menu, menu_drive.x, menu_drive.y);

    }
    else
    {
        menu_drive.fsnumber = -1;
        menu_drive.drive    = -1;
    }
}

static bool icon_to_drive(int icon, FS **fsp, int *dnp)
{
    BarIcon *bi =      baricon_find_icon(baricons, icon);
    FS      *fs = bi ? fs_find_by_number(fses, bi->fsnumber) : NULL;

    if (fsp) *fsp = fs;
    if (dnp) *dnp = bi ? bi->drive : -1;
    return fs != NULL;
}

static char *get_default_path(FS *fs, int drive, bool include_fs)
{
    static char default_path[128];
    char drive_spec[4];
    char *discname = drive_spec;

    if (!fs || drive < 0 || drive > 7)
        return 0;

    if (fs->drive[drive].discname[0])
        discname = fs->drive[drive].discname;
    else
        sprintf(drive_spec, ":%i", drive);

    if (include_fs)
        sprintf(default_path, "%s::%s.", fs->fsparams->fsname, discname);
    else
        sprintf(default_path, ":%s.", discname);

    return strcat(default_path, fs_get_default_dir(fs, drive));
}

static bool alt_pressed(void)
{
    int value;
    if (!_swix(OS_Byte, _INR(0,1)|_OUT(1), 121, 0x82, &value))
        return false;

    return value != 0;
}

static void open_default_dir(FS *fs, int drive)
{
    WimpMessage msg;
    char *dirname = msg.data.bytes+8;

    strcpy(dirname, get_default_path(fs, drive, false));

    msg.hdr.size        = 28 + (strlen(dirname) | 3) + 1;
    msg.hdr.your_ref    = 0;
    msg.hdr.action_code = Wimp_MFilerOpenDir;

    msg.data.words[0] = fs->fsparams->fsnumber;
    msg.data.words[1] = 0; // Flags

    _swix(Wimp_SendMessage, _INR(0,2), Wimp_EUserMessage, &msg, 0);
}

static void message_datasave(WimpUserMessageEvent* msg)
{
    FS *fs;
    int drive;

    if (msg->data.data_save.destination_window != WimpWindow_Iconbar ||
        !icon_to_drive( msg->data.data_save.destination_icon, &fs, &drive))
        return;

    if (alt_pressed())
    {
        if (msg->data.data_load.file_type != FILETYPE_SPRITE)
            return;

        strcpy(msg->data.data_save.leaf_name, "<Wimp$Scrap>");
        msg->data.data_save.estimated_size = -1;
    }
    else
    {

        char *default_path = get_default_path(fs, drive, true);
        char *filename     = msg->data.data_save.leaf_name;

        strshift(filename, strlen(default_path)+1);
        strcpy(filename,default_path);
        filename[strlen(filename)] = '.';
    }

    msg->hdr.size  = 44 + (strlen(msg->data.data_save_ack.leaf_name) | 3) + 1;
    msg->hdr.your_ref    = msg->hdr.my_ref;
    msg->hdr.action_code = Wimp_MDataSaveAck;
    _swi(Wimp_SendMessage, _INR(0,2), Wimp_EUserMessage,
                                      msg, msg->hdr.sender);
}

static void message_dataload(WimpUserMessageEvent* msg)
{
    FS *fs;
    int drive;
    bool alt;

    if (msg->data.data_save.destination_window != WimpWindow_Iconbar ||
        !icon_to_drive( msg->data.data_save.destination_icon, &fs, &drive))
        return;

    alt = alt_pressed();

    if (msg->hdr.your_ref == 0 && !alt) // From filer, alt not pressed
    {
        strcpy(msg->data.bytes, get_default_path(fs, drive, true));

        msg->hdr.size = 20 + (strlen(msg->data.bytes) | 3) + 1;
        msg->hdr.your_ref = msg->hdr.my_ref;
        msg->hdr.action_code = Wimp_MFilerDevicePath;

        _swi(Wimp_SendMessage, _INR(0,2),
                 Wimp_EUserMessage, msg, msg->hdr.sender);

        open_default_dir(fs, drive);
    }
    else
    {
        if (alt)
        {
            if (msg->data.data_load.file_type != FILETYPE_SPRITE)
                return;

            // **TODO** Sprite file contains the sprite to use for this
            // disc.
        }

        msg->hdr.action_code = Wimp_MDataLoadAck;
        msg->hdr.your_ref = msg->hdr.my_ref;
        _swix(Wimp_SendMessage, _INR(0,2),
                 Wimp_EUserMessage, msg, msg->hdr.sender);

        if (!alt)
            open_default_dir(fs, drive);
    }
}


int main(int argc, char *argv[])
{
    int message_list[] = { 0 }; // **TODO**
    bool quit = false;
    UNUSED(argc);
    UNUSED(argv);

    _swi(Wimp_SlotSize, _INR(0,1), 16*1024, -1);

    _swi(Wimp_Initialise, _INR(0,3) | _OUT(1),
             310, 0x4b534154, "OmniDisc", &message_list,
             &task_handle);

    make_menus();

    while (!quit)
    {
        static char poll_block[256];
        static unsigned int reason, data, sender;
        _swi(Wimp_Poll, _INR(0,1) | _IN(3) | _OUTR(0,2),
                        0x400001, poll_block, &pollword,
                        &reason, &data, &sender);

        if (quit)
            break;

        switch (reason)
        {
        case Wimp_EMouseClick:
            mouse_click((WimpMouseClickEvent*)poll_block);
            break;

        case Wimp_EMenuSelection:
            menu_selection((WimpMenuSelectionEvent*)poll_block);
            break;

        case Wimp_EPollWordNonZero:
            {
                if (pollword & Pollword_Drive)
                    baricons = baricon_update(baricons, fses, icons);
                if (pollword & Pollword_Icon)
                    baricon_refresh(baricons, fses, icons);

                pollword = 0;
            }
            break;

        case Wimp_EUserMessage:
        case Wimp_EUserMessageRecorded:
            {
            WimpUserMessageEvent *msg = (WimpUserMessageEvent*)poll_block;

            switch (msg->hdr.action_code)
            {
            case Wimp_MQuit:
                quit = true;
                break;

            case Wimp_MDataSave:
                message_datasave(msg);
                break;

            case Wimp_MDataLoad:
                message_dataload(msg);
                break;
            }

            break;
            }
        }
    }

    // Clear the icon bar icons
    baricons = baricon_update(baricons, NULL, NULL);

    _swi(Wimp_CloseDown, _INR(0,1), task_handle, 0x4b534154);
    task_handle = 0;
}
