#ifndef BARICON_H
#define BARICON_H

#include "FS.h"
#include "Icon.h"

typedef struct BarIcon_s
{
    struct BarIcon_s *prev;
    struct BarIcon_s *next;

    int  fsnumber;
    int  drive;
    char text[12];
    char validation[16];
    int  handle;
} BarIcon;

/* callee-provided functions */

/*******************************************************************
 Function:      baricon_create_icon
 Description:   CALLEE PROVIDED function to create an icon.
 Parameters:    text        -> icon text
                validation  -> icon validation, of the form Ssprite
                buffer_szize = icon buffer size
                window       = window handle / iconbar position
                priority     = priority / icon to left or right
 Returns:       Handle of the created icon.
 ******************************************************************/
int baricon_create_icon(char *text, char *validation, int buffer_size,
                         int window, int priority);

/*******************************************************************
 Function:      baricon_delete_icon
 Description:   CALLEE PROVIDED function to delete an icon.
 Parameters:    handle = handle of the icon created with
                baricon_create_icon.
 Returns:       Nothing
 ******************************************************************/
void baricon_delete_icon(int handle);

/*******************************************************************
 Function:      baricon_update_icon
 Description:   CALLEE PROVIDED function to update an icon.
 Parameters:    handle = handle of the icon created with
                text        -> new text
                validation  -> new validation, of the form Ssprite
 Returns:       Nothing
 ******************************************************************/
void baricon_update_icon(int handle, char* text, char* validation);

/*******************************************************************
 Function:      baricon_update
 Description:   Update the icon bar icons based on the available
                drives in the filing systems in fslist. Icons will
                be created using sprites defined in iconlist.
                icons will be created by calling baricon_create_icon
                and deleted by calling baricon_delete_icon (see
                above).
 Parameters:    list     -> head of the baricon list
                fslist   -> list of file systems
                iconlist -> list of icons
 Returns:       pointer to the new head of the list.
 ******************************************************************/
BarIcon *baricon_update(BarIcon *list, FS* fslist, Icon *iconlist);

/*******************************************************************
 Function:      baricon_refresh
 Description:   Check all the icons in list to see if the text or
                validation needs to be updated (because a disc name or
                sprite has changed). Icons will be updated by calling
                baricon_update_icon (see above).
Parameters:    list     -> head of the baricon list
                fslist   -> list of file systems
                iconlist -> list of icons
 Returns:       Nothing.
 *****************************************************************/
void baricon_refresh(BarIcon *list, FS* fslist, Icon *iconlist);

/*******************************************************************
 Function:      baricon_find
 Description:   Look for a baricon structure in the list.
 Parameters:    list       -> head of the list to look in.
                fssnumber   = fs number to look for
                drive       = drive number to look for
 Returns:       pointer to the BarIcon, or NULL if not found.
 ******************************************************************/
BarIcon *baricon_find(BarIcon *list, int fsnumber, int drive);

/*******************************************************************
 Function:      baricon_find_icon
 Description:   Look for a baricon structure in the list.
 Parameters:    list       -> head of the list to look in.
                icon_hnadle = icon handle to look for
 Returns:       pointer to the BarIcon, or NULL if not found.
 ******************************************************************/
BarIcon *baricon_find_icon(BarIcon *list, int icon_handle);

#endif
